/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteUserEpisodes204,
  DeleteUserEpisodesBody,
  GetUserEpisodes200Item,
  GetUserEpisodesParams,
  PostUserEpisodes201Item,
  PostUserEpisodes409,
  PostUserEpisodesBodyItem
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Create user episode
 */
export const postUserEpisodes = (
    postUserEpisodesBodyItem: PostUserEpisodesBodyItem[],
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<PostUserEpisodes201Item[]>(
      {url: `/user/episodes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postUserEpisodesBodyItem, signal
    },
      );
    }
  


export const getPostUserEpisodesMutationOptions = <TError = PostUserEpisodes409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserEpisodes>>, TError,{data: PostUserEpisodesBodyItem[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserEpisodes>>, TError,{data: PostUserEpisodesBodyItem[]}, TContext> => {
    
const mutationKey = ['postUserEpisodes'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserEpisodes>>, {data: PostUserEpisodesBodyItem[]}> = (props) => {
          const {data} = props ?? {};

          return  postUserEpisodes(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserEpisodesMutationResult = NonNullable<Awaited<ReturnType<typeof postUserEpisodes>>>
    export type PostUserEpisodesMutationBody = PostUserEpisodesBodyItem[]
    export type PostUserEpisodesMutationError = PostUserEpisodes409

    export const usePostUserEpisodes = <TError = PostUserEpisodes409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserEpisodes>>, TError,{data: PostUserEpisodesBodyItem[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserEpisodes>>,
        TError,
        {data: PostUserEpisodesBodyItem[]},
        TContext
      > => {

      const mutationOptions = getPostUserEpisodesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get user episode
 */
export const getUserEpisodes = (
    params: GetUserEpisodesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetUserEpisodes200Item[]>(
      {url: `/user/episodes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserEpisodesQueryKey = (params: GetUserEpisodesParams,) => {
    return [`/user/episodes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserEpisodesQueryOptions = <TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(params: GetUserEpisodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserEpisodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserEpisodes>>> = ({ signal }) => getUserEpisodes(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserEpisodesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserEpisodes>>>
export type GetUserEpisodesQueryError = unknown


export function useGetUserEpisodes<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserEpisodes>>,
          TError,
          Awaited<ReturnType<typeof getUserEpisodes>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserEpisodes<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserEpisodes>>,
          TError,
          Awaited<ReturnType<typeof getUserEpisodes>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserEpisodes<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetUserEpisodes<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserEpisodesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserEpisodesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(params: GetUserEpisodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserEpisodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserEpisodes>>> = ({ signal }) => getUserEpisodes(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserEpisodesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getUserEpisodes>>>
export type GetUserEpisodesSuspenseQueryError = unknown


export function useGetUserEpisodesSuspense<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserEpisodesSuspense<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserEpisodesSuspense<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetUserEpisodesSuspense<TData = Awaited<ReturnType<typeof getUserEpisodes>>, TError = unknown>(
 params: GetUserEpisodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUserEpisodes>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserEpisodesSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete user episodes
 */
export const deleteUserEpisodes = (
    deleteUserEpisodesBody: DeleteUserEpisodesBody,
 ) => {
      
      
      return axiosInstance<DeleteUserEpisodes204>(
      {url: `/user/episodes`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteUserEpisodesBody
    },
      );
    }
  


export const getDeleteUserEpisodesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserEpisodes>>, TError,{data: DeleteUserEpisodesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserEpisodes>>, TError,{data: DeleteUserEpisodesBody}, TContext> => {
    
const mutationKey = ['deleteUserEpisodes'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserEpisodes>>, {data: DeleteUserEpisodesBody}> = (props) => {
          const {data} = props ?? {};

          return  deleteUserEpisodes(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserEpisodesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserEpisodes>>>
    export type DeleteUserEpisodesMutationBody = DeleteUserEpisodesBody
    export type DeleteUserEpisodesMutationError = unknown

    export const useDeleteUserEpisodes = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserEpisodes>>, TError,{data: DeleteUserEpisodesBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserEpisodes>>,
        TError,
        {data: DeleteUserEpisodesBody},
        TContext
      > => {

      const mutationOptions = getDeleteUserEpisodesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    