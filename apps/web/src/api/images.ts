/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostImage201,
  PostImageBody,
  PostImageParams
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Create image
 */
export const postImage = (
    postImageBody: PostImageBody,
    params: PostImageParams,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('file', postImageBody.file)

      return axiosInstance<PostImage201>(
      {url: `/image`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      );
    }
  


export const getPostImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postImage>>, TError,{data: PostImageBody;params: PostImageParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postImage>>, TError,{data: PostImageBody;params: PostImageParams}, TContext> => {
    
const mutationKey = ['postImage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postImage>>, {data: PostImageBody;params: PostImageParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postImage(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostImageMutationResult = NonNullable<Awaited<ReturnType<typeof postImage>>>
    export type PostImageMutationBody = PostImageBody
    export type PostImageMutationError = unknown

    export const usePostImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postImage>>, TError,{data: PostImageBody;params: PostImageParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postImage>>,
        TError,
        {data: PostImageBody;params: PostImageParams},
        TContext
      > => {

      const mutationOptions = getPostImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    