/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  GetSocialLinks200,
  GetSocialLinksParams,
  PutSocialLinksBody
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Upsert social links
 */
export const putSocialLinks = (
    putSocialLinksBody: PutSocialLinksBody,
 ) => {
      
      
      return axiosInstance<unknown>(
      {url: `/social-links`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putSocialLinksBody
    },
      );
    }
  


export const getPutSocialLinksMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSocialLinks>>, TError,{data: PutSocialLinksBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putSocialLinks>>, TError,{data: PutSocialLinksBody}, TContext> => {
    
const mutationKey = ['putSocialLinks'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSocialLinks>>, {data: PutSocialLinksBody}> = (props) => {
          const {data} = props ?? {};

          return  putSocialLinks(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSocialLinksMutationResult = NonNullable<Awaited<ReturnType<typeof putSocialLinks>>>
    export type PutSocialLinksMutationBody = PutSocialLinksBody
    export type PutSocialLinksMutationError = unknown

    export const usePutSocialLinks = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSocialLinks>>, TError,{data: PutSocialLinksBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putSocialLinks>>,
        TError,
        {data: PutSocialLinksBody},
        TContext
      > => {

      const mutationOptions = getPutSocialLinksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get social links by userId
 */
export const getSocialLinks = (
    params: GetSocialLinksParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetSocialLinks200>(
      {url: `/social-links`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetSocialLinksQueryKey = (params: GetSocialLinksParams,) => {
    return [`/social-links`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSocialLinksQueryOptions = <TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(params: GetSocialLinksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSocialLinksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSocialLinks>>> = ({ signal }) => getSocialLinks(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSocialLinksQueryResult = NonNullable<Awaited<ReturnType<typeof getSocialLinks>>>
export type GetSocialLinksQueryError = unknown


export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSocialLinks>>,
          TError,
          Awaited<ReturnType<typeof getSocialLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSocialLinks>>,
          TError,
          Awaited<ReturnType<typeof getSocialLinks>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSocialLinksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSocialLinksSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(params: GetSocialLinksParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSocialLinksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSocialLinks>>> = ({ signal }) => getSocialLinks(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSocialLinksSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getSocialLinks>>>
export type GetSocialLinksSuspenseQueryError = unknown


export function useGetSocialLinksSuspense<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSocialLinksSuspense<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSocialLinksSuspense<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetSocialLinksSuspense<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = unknown>(
 params: GetSocialLinksParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSocialLinksSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



