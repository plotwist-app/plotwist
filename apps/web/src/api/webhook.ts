/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import { axiosInstance } from '../services/axios-instance';




/**
 * Webhook route
 */
export const postCompleteStripeSubscription = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/complete-stripe-subscription`, method: 'POST', signal
    },
      );
    }
  


export const getPostCompleteStripeSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCompleteStripeSubscription>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postCompleteStripeSubscription>>, TError,void, TContext> => {
    
const mutationKey = ['postCompleteStripeSubscription'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCompleteStripeSubscription>>, void> = () => {
          

          return  postCompleteStripeSubscription()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCompleteStripeSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postCompleteStripeSubscription>>>
    
    export type PostCompleteStripeSubscriptionMutationError = unknown

    export const usePostCompleteStripeSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCompleteStripeSubscription>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postCompleteStripeSubscription>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostCompleteStripeSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    